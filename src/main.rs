// rand クレートを外部依存として使用する
extern crate rand;

// 標準の IO ライブラリをインポート
use std::io;
// Rng トレイトは、乱数生成器が実装するメソッドを定義しているもの
use rand::Rng;

fn main() {
    println!("Guess the number!");

    // thread_rng() 関数は乱数生成器を返す関数
    // 乱数生成器の gen_range メソッドは、Rng トレイトで定義されているメソッド
    // gen_range(1, 101) で1以上101未満の乱数を生成している
    let secret_number = rand::thread_rng().gen_range(1, 101);

    println!("The secret number is: {}", secret_number);

    println!("Please input your guess.");

    //--------------------------------------------------------------------------
    // let 文によって変数を生成する
    // 変数の前に `mut` をつけると、変数が可変になる
    // 
    // 通常、`let foo = 5` のようにすると、不変な変数として定義される
    //
    // `String::new` は、String 型が持っている静的関数で
    // 空の String 型オブジェクトを生成する、すなわち空の文字列を生成する関数
    //--------------------------------------------------------------------------
    let mut guess = String::new();

    //--------------------------------------------------------------------------
    // `stdin()` 関数は、`std::io::Stdin` オブジェクトを返す関数。
    // Stdin 型は、標準入力へのハンドルを表す型である
    //
    // `read_line 関数は、標準入力からユーザーの入力を受け付ける関数。
    //
    // `&` は、C言語同様に変数を参照渡しするためのもの。
    // ただし、参照渡しも基本不変なので、可変にするには `&guess` ではなく `&mut guess` とする必要がある
    //
    // read_line() 関数は文字列型以外に値を返す。その汎用的な型は `io::Result` である。
    // Result 型は列挙型で、列挙子としては Ok と Err がある。
    // Result 型には、エラーハンドリングのための関数として expect 関数がある。
    // この関数は、Err の場合プログラムをクラッシュさせ、引数のメッセージを出力する。
    //--------------------------------------------------------------------------
    io::stdin().read_line(&mut guess)
        .expect("Failed to read line");

    //--------------------------------------------------------------------------
    // println! マクロの {} はプレースホルダーを表す
    //--------------------------------------------------------------------------
    println!("You guessed: {}", guess);
}
